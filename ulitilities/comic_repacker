#!/usr/bin/env bash
# -*- tab-width: 3; encoding: utf-8 -*-
#
## @file comic_repacker.sh
## @author Arunkumar Mourougappane <amouroug@buffalo.edu>
## @brief A script to read ZIP archive, convert the supported files to png and repack them as CBR.
## @copyright MIT License
## @version 1
##

set -e

usage="$(basename "$0") [-h] [-i input file path] [-o output directory]
Converstss a ZIP archive of webp or jpg files into a CBR (Comic Format) archive of PNG files.
where:
    -h  show this help text
    -i  input ZIP archive file path
    -o  Directory to dump the output directory"

TEMPARGS_VAR=$(getopt -o i:o:h --long input-file:output-dir:help -- "$@")
eval set -- "${TEMPARGS_VAR}"

# extract options and their arguments into variables.
while true ; do
    case "$1" in
        -i|--input-file)
            file_name_arg="$2" ;
            shift 2 ;;
        -o|--output-dir)
            output_dir_arg="$2" ; shift 2 ;;
         -h|--help) echo "$usage"; exit;;
        --) shift ; break ;;
        *) echo "Internal error!" ; exit 1 ;;
    esac
done

if [ -z "${file_name_arg}" ]
then
   echo "Bad input File path argument was provided";
   echo "$usage"
   exit 2;
fi

if [ -z "${output_dir_arg}" ]
then
   echo "Bad output directory path argument was provided";
   echo "$usage"
   exit 2;
fi

input_file_path="$(readlink -f "${file_name_arg}")"

output_dir_path="$(readlink -f "${output_dir_arg}")"


if [ ! -f "${input_file_path}" ]
then
   echo "Input File does not exist";
   exit 3
fi

if [ ! -d "${output_dir_path}" ]
then
   echo "Input File does not exist";
   exit 3
fi

comic_dir_temp_path="$(mktemp -d -p /tmp/)"

unzip -qq "${input_file_path}" -d "${comic_dir_temp_path}"

input_file_name_with_ext="$(basename "$input_file_path")"
input_file_name="${input_file_name_with_ext%.*}"
new_comic_file_name="$(echo "${input_file_name// /_}" | tr -s _)"

## @fn process_comic_image_file()
## @brief Function that finds file extension and performs appropriate conversion to PNG
## @param filepath Path of file on File System.
function process_comic_image_file()
(
   local filepath="$1"
   local comic_path
   local filename_with_ext
   local filename
   local extension
   local filename_new

   comic_path="$(dirname "${filepath}")"
   # get the file name and extensions
   filename_with_ext=$(basename "${filepath}")
   filename="${filename_with_ext%.*}"
   extension="${filename_with_ext##*.}"
   filename_new="${comic_path}/${filename}.png"

   printf "\tProcessing File: %s\n" "${filename_with_ext}"
   # convert webp to png
   if [ "${filename_with_ext}" = "final.jpg" ]
   then
      echo "Sanitize for final.jpg"
      rm "${filepath}"
   else
      if [ "${extension}" = "webp" ]
      then
         dwebp "${filepath}" -o "${filename_new}" -quiet
         rm "${filepath}"
      elif [ "${extension}" = "png" ]
      then
         : echo "File already compatible"
      # convert jpg to png
      elif [ "${extension}" = "jpg" ]
      then
         mogrify -format png "${filepath}" -write "${filename_new}" -silent
         rm "${filepath}"
      # Nuke other files
      else
         echo "Found unsupported format, Removing ${filename_with_ext}..."
         rm "${filepath}"
      fi
   fi
)


export -f process_comic_image_file

printf "Comic Name: %s\n" "${input_file_name}"
find "${comic_dir_temp_path}" -type f ! -path '*.png' -exec bash -c 'process_comic_image_file "$@"' bash {} \;
printf "Done!\n\n\n"


# repack as cbr
zip --quiet -r "${output_dir_path}/${new_comic_file_name}.cbr" "${comic_dir_temp_path}" && rm -R "${comic_dir_temp_path}"
printf "Comic Repacked Name: %s\n" "${new_comic_file_name}.cbr"
